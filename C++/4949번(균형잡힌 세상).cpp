/*
	#### 문제 해결 TIP ####
	-  문제를 해결하기 위해서는 stack 자료구조 개념과
	   약간의 아이디어가 필요하다.

	   문제 해결을 위해서 떠올린 아이디어는 스택에 '('와 '['문자를 저장하다가
	   입력한 문자열의 각 문자를 ')' 와 ']'인지 확인한 후,
	   해당 문자들이라면 스택의 최상단에 있는 문자'('와 '['와 쌍을 이루는 지
	   확인하여 쌍을 이룬다면 스택에서 하나씩 문자를 제거해 나가면 된다.

	1) 문자열을 입력하고 입력한 문자열의 각 문자들을 하나씩
	   '(' 와 '[' 인지 비교하고 맞을 경우, 스택에 push해준다. 영문자들은 무시해준다.

	2) 이 과정에서, 문자열 내의 문자 중 ')' 또는 ']'를 탐색하게 되면
	   스택공간이 비어있는지 or 스택의 최상단이 해당문자와 쌍을 이루는지 체크한다.

	3) 쌍을 이루는 문자가 최상단에 있지 않거나 스택이 비어있는 경우엔
	   문제에서 요구하는 "균형"에 해당하는 변수인 check_valance 변수 값을 false로 설정.

	4) 스택이 비어있지 않거나 스택의 최상단이 짝을 이루는 문자일 경우, 해당 문자를 스택에서 삭제한다.

	5) 모든 문자열을 탐색한 후, 스택 공간이 비어있지 않다는 것은 "균형"잡힌 문자열이 아니라는 의미이므로,
	   check_valance 값을 false로 설정

	   모든 문자열을 탐색한 후, check_valance 값을 true로 설정되어 있다는 것은 "균형"잡힌 문자열이라는 의미이므로,
	   "yes"를 출력

	   아닐 경우, "no"를 출력.
*/


#include <iostream>
#include <stack>
#include <string>

using namespace std;

int main()
{
	// '.' 이 입력될 때 까지 반복
	while (true)
	{
		string str;				
		getline(cin, str);							// 문자열 입력

		if (str == ".")								// '.'이 입력되면 
			break;									// 프로그램 종료

		stack<int> s;								// '(' 와 '['를 저장할 스택공간 생성
		bool check_valance = true;					// 문자열에서 ')' 또는 ']' 탐색했을 때, 스택공간이 비었는지 or 스택 최상단이 해당 문자와 쌍을 이루는지 체크하는 변수.

		for (int i = 0; i < str.size(); i++)		// 문자열 개수만큼 반복문 실행
		{
			if (str[i] == '(' || str[i] == '[')		// 문자 '(' 또는 '['를 만나면 스택에 저장.
				s.push(str[i]);
			else if (str[i] == ')')					// 문자 ')'를 만났을 경우,
			{
				if (s.empty() || s.top() != '(')	// 먼저 스택이 비었는지 or 스택의 최상단이 ')'와 짝을 이루는 '('가 아닌지 확인
				{
					check_valance = false;			// 조건에 부합하면 false 후 다음 문자를 탐색
					break;
				}
				s.pop();							// 스택이 비어있지 않거나 스택의 최상단이 짝을 이루는 문자인 경우, 해당 문자를 스택에서 삭제한다.
			}
			else if (str[i] == ']')
			{
				if (s.empty() || s.top() != '[')	// 문자 ')'를 만났을 경우,
				{
					check_valance = false;			// 조건에 부합하면 false 후 다음 문자를 탐색
					break;
				}
				s.pop();							// 스택이 비어있지 않거나 스택의 최상단이 짝을 이루는 문자인 경우, 해당 문자를 스택에서 삭제한다.
			}
		}

		if (!s.empty())								// 입력한 문자열 내의 문자들을 전부 탐색한 뒤에, 스택 공간이 비어있지 않다면
			check_valance = false;					// "균형" 잡힌 문자열이 아니므로 false 값으로 설정

		if (check_valance == true)					// 입력한 문자열 내의 문자들을 전부 탐색한 뒤에, "균형" 값을 나타내는 check_valance 변수 값이 true인 경우,
			cout << "yes" << "\n";					// "균형" 잡힌 문자열 이므로 "yes"를 출력
		else
			cout << "no" << "\n";					// 아닐 경우, "no" 출력.
	}
	return 0;
}